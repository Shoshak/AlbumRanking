@page "/"
@using Newtonsoft.Json.Linq
@using AlbumRanking.Shared
@inject HttpClient Client
@inject IJSRuntime JsRuntime

<PageTitle>Album ranking</PageTitle>

<EditForm Model="this" OnSubmit="Submit" class="p-2">
    <InputNumber @bind-Value="AlbumId"></InputNumber>
</EditForm>

<div class="p-2">
    <SortableList Id="sortable" Items="_tracks" Context="item" OnUpdate="SortList">
        <SortableItemTemplate>
            <div class="card" style="height: 4rem;">
                <p>@item</p>
            </div>
        </SortableItemTemplate>
    </SortableList>
</div>

<div class="p-2">
    @switch (_state)
    {
        case State.First:
            <p>Чтобы ранкнуть альбомы необходимо:</p>
            <ol type="1">
                <li>Найти нужный master на discogs.com (не release!)</li>
                <li>Скопировать номер из ссылки и вставить сюда</li>
            </ol>
            <p>Пояснение с видео есть в тг канале, выше закрепа.</p>
            break;
        case State.NotFound:
            <p>Не могу найти альбом.</p>
            break;
        case State.Found:
            <button @onclick="ExportRanking" class="mt-2">Export</button>
            <button @onclick="CopyRankingToClipboard">Copy</button>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>

@code {

    enum State
    {
        First,
        NotFound,
        Found
    }

    private State _state = State.First;

    [SupplyParameterFromForm]
    private int? AlbumId { get; set; }
    
    private string? AlbumName { get; set; }
    
    private readonly List<string> _tracks = [];

    private async Task Submit()
    {
        _tracks.Clear();
        string resString;
        try
        {

            resString = await Client.GetStringAsync($"https://api.discogs.com/masters/{AlbumId}");
        }
        catch (HttpRequestException)
        {
            _state = State.NotFound;
            return;
        }

        _state = State.Found;
        var json = JObject.Parse(resString);
        var tracks =
            from t in json["tracklist"]
            select (string)t["title"];
        AlbumName = (string)json["title"]!;
        _tracks.AddRange(tracks);
    }
    
    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var itemToMove = _tracks[oldIndex];
        _tracks.RemoveAt(oldIndex);

        if (newIndex < _tracks.Count)
        {
            _tracks.Insert(newIndex, itemToMove);
        }
        else
        {
            _tracks.Add(itemToMove);
        }

        StateHasChanged();
    }

    private string GetRankingText()
    {

        var tracks = _tracks.Select((t, i) => $"{i + 1}. {t}");
        var contents = string.Join("\n", tracks);
        return $"{AlbumName}: \n\n" + contents;
    }

    private async Task ExportRanking()
    {
        await JsRuntime.InvokeVoidAsync("saveAsFile", "rankings.txt", GetRankingText());
    }

    private async Task CopyRankingToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetRankingText());
    }
    
}