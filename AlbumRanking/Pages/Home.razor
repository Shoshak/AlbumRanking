@page "/"
@using Newtonsoft.Json.Linq
@using AlbumRanking.Shared
@inject HttpClient Client
@inject IJSRuntime JsRuntime

<PageTitle>Album ranking</PageTitle>
<div class="p-2">
    <InputSelect @bind-Value="SelectedPlatform">
        <option value="@Platform.DiscogsMaster">Discogs (master)</option>
        <option value="@Platform.DiscogsRelease">Discogs (Release)</option>
        <option value="@Platform.Spotify">Spotify</option>
    </InputSelect>
</div>
@switch (SelectedPlatform){
    case Platform.DiscogsMaster:
        <EditForm Model="this" OnSubmit="SubmitDiscogs" class="p-2">
            <InputNumber @bind-Value="AlbumId" EnableMinMax="true" Min=0 TValue="int" AllowNegativeNumbers="false"/>
            <button type="submit">➡️</button>
            <button type="button" @onclick="PageReset">Сброс</button>
        </EditForm>
        break;
    case Platform.DiscogsRelease:
        <EditForm Model="this" OnSubmit="SubmitDiscogs" class="p-2">
            <InputNumber @bind-Value="AlbumId" EnableMinMax="true" Min=0 TValue="int" AllowNegativeNumbers="false"/>
            <button type="submit">➡️</button>
            <button type="button" @onclick="PageReset">Сброс</button>
        </EditForm>
        break;
    case Platform.Spotify:
        <EditForm Model="this" OnSubmit="SubmitSpotify" class="p-2">
            <InputText @bind-Value="AlbumBase" TValue="string"/>
            <button type="submit">➡️</button>
            <button type="button" @onclick="PageReset">Сброс</button>
        </EditForm>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}
<div class="p-2">
    @switch (_state)
    {
        case State.First:
            switch (SelectedPlatform){
                case Platform.DiscogsMaster:
                    <div>
                        <p>Чтобы ранкнуть альбомы необходимо:</p>
                        <ol type="1">
                            <li>Найти нужный master на discogs.com (не release!)</li>
                            <li>Скопировать номер из ссылки и вставить сюда</li>
                            <li>Нажать энтер или кнопку "➡️"</li>
                        </ol>
                    </div>
                    break;
                case Platform.DiscogsRelease:
                    <div>
                        <p>Чтобы ранкнуть альбомы необходимо:</p>
                        <ol type="1">
                            <li>Найти нужный release на discogs.com</li>
                            <li>Скопировать номер из ссылки и вставить сюда</li>
                            <li>Нажать энтер или кнопку "➡️"</li>
                        </ol>
                    </div>
                    break;
                case Platform.Spotify:
                    <div>
                        <p>Чтобы ранкнуть альбомы необходимо:</p>
                        <ol type="1">
                            <li>Найти нужный альбом на Spotify</li>
                            <li>Скопировать часть ссылки (которая идёт после /album/ и до ?) и вставить сюда</li>
                            <li>Нажать энтер или кнопку "➡️"</li>
                        </ol>
                    </div>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
                }
            <p>Пояснение с видео есть в тг канале, выше закрепа.</p>
            break;
        case State.NotFound:
            <p>Не могу найти альбом.</p>
            break;
        case State.Found:
            <button @onclick="ExportRanking" class="mt-2">Export</button>
            <button @onclick="CopyRankingToClipboard">Copy</button>
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>
<div class="p-2">
    <SortableList Id="sortable" Items="_tracks" Context="item" OnUpdate="SortList">
        <SortableItemTemplate>
            <div class="card" style="height: 4rem;">
                <p>@item</p>
            </div>
        </SortableItemTemplate>
    </SortableList>
</div>
@code {

    enum State
    {
        First,
        NotFound,
        Found
    }

    enum Platform
    {
        DiscogsMaster,
        DiscogsRelease,
        Spotify
    }

    private State _state = State.First;

    [SupplyParameterFromForm]
    private int AlbumId { get; set; }
    private string AlbumBase { get; set; }
    private Platform SelectedPlatform { get; set; }
    private string? AlbumName;
    private readonly List<string> _tracks = [];

    private async Task PageReset(){
        _tracks.Clear();
        _state = State.First;
        SelectedPlatform = Platform.DiscogsMaster;
        AlbumId = 0;
        AlbumBase = "";
    }
    private async Task SubmitDiscogs()
    {
        _tracks.Clear();
        string resString;
        string Platform;
        try
        {
            switch (SelectedPlatform){
                case Home.Platform.DiscogsMaster:
                    Platform = "masters";
                    break;
                case Home.Platform.DiscogsRelease:
                    Platform = "releases";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            resString = await Client.GetStringAsync($"https://api.discogs.com/{Platform}/{AlbumId}");
        }
        catch (HttpRequestException)
        {
            _state = State.NotFound;
            return;
        }

        _state = State.Found;
        var json = JObject.Parse(resString);
        var tracks =
            from t in json["tracklist"]
            select (string)t["title"];
        AlbumName = (string)json["title"]!;
        _tracks.AddRange(tracks);
    }

    private async Task SubmitSpotify()
    {
        _tracks.Clear();
        SpotifyAPI.Web.FullAlbum album;
        List<string> albumTracks = [];
        try
        {
            var config = SpotifyClientConfig
            .CreateDefault()
            .WithAuthenticator(new ClientCredentialsAuthenticator("1e8c530d1e7c4d2da881a0e38ead5ae3", "8bd4fefe050c4438a1c06b74ac095fc5"));

            var spotify = new SpotifyClient(config);
            album = await spotify.Albums.Get(AlbumBase);
        }
        catch (APIException)    
        {
            _state = State.NotFound;
            return;
        }
    
        _state = State.Found;
        AlbumName = (string)album.Name;
        album.Tracks.Items.ForEach(delegate(SpotifyAPI.Web.SimpleTrack track){
            albumTracks.Add(track.Name);
        });
        _tracks.AddRange(albumTracks);
    }
    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var itemToMove = _tracks[oldIndex];
        _tracks.RemoveAt(oldIndex);

        if (newIndex < _tracks.Count)
        {
            _tracks.Insert(newIndex, itemToMove);
        }
        else
        {
            _tracks.Add(itemToMove);
        }

        StateHasChanged();
    }

    private string GetRankingText()
    {

        var tracks = _tracks.Select((t, i) => $"{i + 1}. {t}");
        var contents = string.Join("\n", tracks);
        return $"{AlbumName}: \n\n" + contents;
    }

    private async Task ExportRanking()
    {
        await JsRuntime.InvokeVoidAsync("saveAsFile", "rankings.txt", GetRankingText());
    }

    private async Task CopyRankingToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetRankingText());
    }
    
}